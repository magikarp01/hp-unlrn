
# %%

import openai
from dotenv import load_dotenv
import os
import json

# Load environment variables from .env file
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
client = openai.OpenAI(
    organization='org-X6T6Ar6geRtOrQgQTQS3OUpw',
)

def translate_datapoints(datapoints, target_language, model="gpt-4-1106-preview", verbose=False, save_path=None):
    """
    Augment a list of datapoints with new ones generated by the OpenAI API.

    :param datapoints: A list of dictionaries containing the existing datapoints.
    :param num_new_datapoints: Number of new datapoints to generate.
    :param model: The OpenAI model to use for generation.
    :return: The augmented list of datapoints.
    """
    if save_path is None:
        from datetime import datetime
        exp_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        # TODO: change this
        save_path = f"datasets/translated_v2_hp_502/{target_language}_datapoints_{exp_time}.jsonl"

    new_datapoints = []

    for i, datapoint in enumerate(datapoints):
        generate_datapoints_messages = [
            {
                "role": "system",
                "content": f"""
                    You are a helpful assistant designed to output JSON.
                    The following datapoint contains a JSON file with trivia questions about Harry Potter. I want you to translate the content in the JSON file into {target_language}, and output the translated JSON file.
                """,
            },
            {
                "role": "user",
                "content": f"{datapoint}",
            },
        ]

        response = client.chat.completions.create(
            model=model,
            response_format={"type": "json_object"},
            messages=generate_datapoints_messages,
        )

        new_datapoint = json.loads(response.choices[0].message.content)
        new_datapoints.append(new_datapoint)
        if verbose:
            print(f"Generated {i+1}/{len(datapoints)} new datapoints.\nDatapoint: {new_datapoint}")

        with open(save_path, "w") as outfile:
            for entry in new_datapoints:
                json.dump(entry, outfile)
                outfile.write('\n')

# Example usage
# load list of dictionaries from jsonl file
with open("datasets/harry_potter_trivia_502_v2.jsonl", "r") as infile:
    HP_TRIVIA = [json.loads(line) for line in infile]

target_languages = ['Chinese', 'Hindi', 'Russian']

for target_language in target_languages:
    augmented_datapoints = translate_datapoints(HP_TRIVIA, target_language=target_language, verbose=True)

# %%
